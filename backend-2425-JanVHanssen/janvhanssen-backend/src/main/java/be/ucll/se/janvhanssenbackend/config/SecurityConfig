import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Configuration
public class SecurityConfig {

    private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        logger.info("Configuring SecurityFilterChain with CORS");
        http
            .csrf(csrf -> csrf.disable()) // CSRF uit, want API
            .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Gebruik custom CORS-config
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll() // OPTIONS altijd toestaan
                .anyRequest().permitAll() // Andere requests open
            );
        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        logger.info("CORS configuration loaded for origins: https://frontend-2425-janvhanssen.vercel.app, http://localhost:3000");
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOrigin("https://frontend-2425-janvhanssen.vercel.app"); // Exacte Vercel-URL
        configuration.addAllowedOrigin("http://localhost:3000"); // Voor lokale ontwikkeling
        configuration.setAllowedMethods(java.util.Arrays.asList("GET", "POST", "PATCH", "OPTIONS"));
        configuration.setAllowedHeaders(java.util.Arrays.asList("*"));
        configuration.setAllowCredentials(true); // Nodig voor credentials: 'include'
        configuration.setMaxAge(3600L); // Cache preflight requests voor 1 uur

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
